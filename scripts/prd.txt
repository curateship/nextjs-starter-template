<context>
# Overview  
System Everything Phase 1 - Multi-Site & Theme Architecture Platform

A Next.js-based multi-tenant platform that enables super admins to manage site owners and their websites through a unified admin interface. The platform focuses on providing a scalable foundation for multi-site management with flexible theming capabilities and modular block-based content creation.

This phase establishes the core multi-tenant architecture, authentication systems, and foundational site building capabilities while maintaining simplicity and avoiding over-engineering.

# Core Features  
## 1. Dual Authentication System
- **Super Admin/Admin Management**: Single table with role-based permissions (super_admin | admin) for platform-level operations
- **Site Owner Management**: Separate table for site owners with site-scoped operations to avoid complexity
- **Clean Separation**: No hierarchical user systems - simple CRUD operations for each user type
- **Future-Ready**: Architecture supports adding site users later without refactoring

## 2. File-Based Theme System with Database Customization
- **Hardcoded Themes**: Developer-controlled themes stored in `/app/themes/` for consistency and performance
- **Database Settings**: Site-specific customizations (colors, fonts, logos) stored in database for flexibility
- **Super Admin Controls**: Can edit any site's theme settings for support and compliance
- **Site Owner Customization**: Can customize their own site's appearance within defined parameters

## 3. Simple User Management (CRUD)
- **Super Admin Functions**: Create, read, update, delete site owner accounts
- **Site Owner Functions**: Manage their own sites and edit personal profile details
- **No Complex Hierarchies**: Focused on essential functionality for MVP validation

## 4. Multi-Site Management
- **Super Admin Oversight**: Full CRUD access to all sites across all site owners
- **Site Owner Control**: CRUD access limited to their own sites
- **Clean Data Separation**: Each site maintains independent configuration and content

## 5. Block-Based Site Builder (Layout Blocks)
- **Block Renderer Pattern**: Centralized rendering system using existing BlockRenderer.tsx architecture
- **Page-Specific Block Libraries**: Super admin controls which blocks are available for each page type (home, product, cart, etc.)
- **Home Page Focus**: Initial implementation starts with home page customization
- **Admin UI Pattern**: Uses existing card-based admin components (SiteBlock.tsx, BasicBlock.tsx patterns)

# User Experience  
## Super Admin Persona
- **Role**: Platform administrator managing the entire multi-tenant system
- **Goals**: Oversee site owners, manage themes, ensure platform consistency
- **Key Flows**: 
  - Create and manage site owner accounts
  - Configure available themes and block libraries
  - Monitor and support site owners
  - Manage platform-wide settings

## Site Owner Persona  
- **Role**: Business owner or manager creating and customizing their website
- **Goals**: Build and maintain their site with professional appearance
- **Key Flows**:
  - Create and configure their sites
  - Customize theme settings (colors, fonts, logos)
  - Build pages using available blocks
  - Manage their own profile and settings

## Site Builder User Flow
1. **Select Page** ‚Üí Choose page to customize (starting with home page)
2. **Choose Blocks** ‚Üí Select from page-appropriate block library
3. **Configure Blocks** ‚Üí Use settings panels to customize content and appearance
4. **Preview Changes** ‚Üí Live preview using BlockRenderer system
5. **Save and Publish** ‚Üí Apply changes to live site
</context>

<PRD>
# Technical Architecture  
## System Components
- **Next.js 15.3.4** with App Router for modern React patterns
- **TypeScript 5** for type safety and developer experience
- **Tailwind CSS 4** for consistent styling
- **Existing Block System**: Leverages current BlockRenderer.tsx architecture

## Database Schema
### Authentication Tables
```sql
users_super_admins (table)
‚îú‚îÄ‚îÄ id, email, password_hash, role (super_admin | admin), created_at

users_tenant_roles (table)
‚îú‚îÄ‚îÄ id, email, password_hash, status, created_at

users_site_level (table) - future site users
‚îú‚îÄ‚îÄ id, email, password_hash, site_id, status, created_at

users_details (table)
‚îú‚îÄ‚îÄ user_id, user_type (admin_user | site_owner | user), 
    name, phone, avatar, bio, preferences

sites (table)
‚îú‚îÄ‚îÄ id, owner_id, name, domain, theme_id, status, created_at

site_settings (table)
‚îú‚îÄ‚îÄ site_id, theme_id, logo_url, primary_color, secondary_color, 
    font_family, font_size, background_color, header_text, footer_text
```

### Block System Tables
```sql
site_pages (table)
‚îú‚îÄ‚îÄ id, site_id, page_type (home, about, product, etc.), name, status

page_blocks (table)
‚îú‚îÄ‚îÄ id, page_id, block_type, position, config (JSON), active

page_block_libraries (table)
‚îú‚îÄ‚îÄ page_type, allowed_block_types (JSON)

layout_blocks (table)
‚îú‚îÄ‚îÄ id, name, type (layout_block_hero, layout_block_contact, layout_block_footer, etc.), 
    config_schema (JSON), active

module_blocks (table)
‚îú‚îÄ‚îÄ id, name, type (products_block_grid, posts_block_list, newsletters_block_signup, etc.), 
    config_schema (JSON), active
```

## Theme Architecture
- **File Structure**: `/app/themes/{theme-name}/` containing layout components and styles
- **Theme Integration**: BlockRenderer dynamically loads theme-specific components
- **Customization Layer**: Database settings override default theme values
- **Component Pattern**: Uses existing frontend/layout/ component architecture

## Block System Integration
- **Existing BlockRenderer**: `<BlockRenderer type="HeroBlock" config={{...}} />`
- **Page-Specific Blocks**: Block library restrictions prevent inappropriate block usage
- **Admin UI**: Leverages existing admin/modules/ component patterns
- **Block Categories & Locations**:
  - **Layout blocks**: `src/components/frontend/layout/` (user-editable with business logic)
  - **Content-specific blocks**: `src/components/frontend/modules/` (products, posts, newsletters, etc.)
  - **Admin blocks**: `src/components/admin/modules/` (management interfaces)
  - **UI components**: `src/components/ui/` (pure presentation components)

## üîí CRITICAL: Block Isolation Protocol
**‚ö†Ô∏è MANDATORY DEVELOPMENT RULE: When working on block components:**

1. **BLOCK-ONLY CHANGES**: Only modify the specific block component being worked on
2. **NO EXTERNAL CHANGES**: Do NOT modify files outside the block without explicit approval
3. **USER CONFIRMATION**: Get explicit approval before any changes outside the block scope
4. **ISOLATION FIRST**: Solve all problems within the block whenever possible
5. **COMPONENT EXTRACTION**: Break complex blocks into focused, single-purpose components within the block folder

**This isolation ensures:**
- Prevents cascading changes across the platform
- Maintains multi-tenant stability
- Enables safe parallel development
- Preserves existing functionality

## üß© Component Architecture Standards

### **Organization Principles**
- **Component Extraction**: Break large components into focused, single-purpose parts
- **Hierarchy**: Main component ‚Üí direct dependencies ‚Üí supporting components  
- **Clean Code**: Eliminate deep nesting and "ugly closing brackets"
- **Strategic Commenting**: Explain "why" not "what", avoid over-commenting

### **Code Structure Example**
```typescript
// Main component (clean, focused)
const SiteBuilderBlock = () => (
  <div className="site-builder">
    <BlockLibrary />
    <BlockConfigPanel />
    <PreviewArea />
  </div>
)

// Supporting components (extracted for clarity)
const BlockLibrary = ({ availableBlocks, onBlockSelect }) => (...)
const BlockConfigPanel = ({ selectedBlock, onConfigChange }) => (...)
const PreviewArea = ({ blocks, config }) => (...)
```

### **Formatting & Commenting Standards**
- **TypeScript Interfaces**: Define clear prop types for all components
- **Meaningful Names**: Use descriptive component and variable names
- **Single Responsibility**: Each component should have one clear purpose
- **Comment Intent**: Explain business logic and architectural decisions, not obvious code
- **Consistent Patterns**: Follow established patterns from existing codebase

# Development Roadmap  
## Phase 0: Critical Infrastructure (PREREQUISITE)
‚ö†Ô∏è **MUST COMPLETE BEFORE ANY FEATURE DEVELOPMENT**

### Database Infrastructure
- **Set up Supabase PostgreSQL** database with connection configuration
- **Configure Prisma ORM** with Supabase connection string
- **Create migration system** for schema versioning
- **Implement database seed scripts** for development
- **Set up Row Level Security (RLS)** for multi-tenant data isolation

### Authentication Foundation (Phase-Based Approach)
**Phase 0-1A: Supabase Auth (MVP)**
- **Install Supabase client** (@supabase/supabase-js)
- **Implement Supabase Auth** for email/password authentication
- **Create authentication middleware** using Supabase session
- **Add role-based access control** with Supabase user metadata
- **Build login/logout flows** with Supabase Auth UI
- **Configure RLS policies** for automatic tenant scoping

**Phase 1B+: NextAuth Integration (Enterprise Scale)**
- **Add NextAuth.js** with Supabase adapter (optional upgrade)
- **Enable OAuth providers** (Google, GitHub, SSO)
- **Maintain backward compatibility** with existing Supabase auth

### Core Block System
- **Create BlockRenderer infrastructure** (currently missing)
- **Define block type system** and configuration schema
- **Implement dynamic block loading** mechanism
- **Add block validation** and error boundaries
- **Create base block components** for extension

## Phase 1: Foundation & Core Features
### User Management System
- Implement dual authentication tables (admin_users + site_owners)
- Create super admin CRUD for site owner management
- Build site owner self-management interface
- Add comprehensive form validation (React Hook Form + Zod)
- Implement user profile management and avatar uploads

### Basic Multi-Site Management
- Implement site CRUD operations for both user types
- Create site dashboard and management interfaces
- Establish site-owner relationships with proper data isolation
- Build site status and configuration management
- Add tenant-scoped data access patterns

### Theme System Foundation  
- Create theme structure in `/app/themes/` with proper TypeScript support
- Implement database settings system for customization
- Build theme selection and customization UI
- Add theme validation and conflict prevention
- Integrate with existing component architecture

### Block-Based Site Builder (MVP)
- Build BlockRenderer system for dynamic page building
- Implement page-specific block library system
- Create block configuration UI using admin component patterns
- Build home page customization as initial implementation
- Add block preview and validation systems

## Phase 2: Advanced Features (Post-MVP)
- Site user management system (third user type)
- Advanced block types and page templates
- Theme marketplace functionality
- Bulk operations and advanced admin features
- Analytics and reporting systems
- API integrations and webhooks
- Advanced customization options
- Multi-language support
- Advanced caching strategies
- Real-time collaboration features

# Logical Dependency Chain
## Phase 0: Critical Infrastructure (MANDATORY FIRST)
1. **Supabase Setup** ‚Üí PostgreSQL database + Auth + Storage
2. **Prisma Configuration** ‚Üí Type-safe database operations
3. **Supabase Auth Integration** ‚Üí Email/password authentication
4. **RLS Security Policies** ‚Üí Multi-tenant data isolation
5. **BlockRenderer Core** ‚Üí Dynamic content system foundation
6. **Admin Route Protection** ‚Üí Supabase auth middleware
7. **Error Handling Framework** ‚Üí Robust error boundaries

## Phase 1A: Single-Tenant MVP
6. **User Management (Single Tenant)** ‚Üí Admin and site owner CRUD
7. **Basic Site Management** ‚Üí Single tenant site operations
8. **Simple Block System** ‚Üí Static blocks with basic configuration
9. **Theme Selection** ‚Üí Basic theme switching
10. **Admin Dashboard** ‚Üí Management interface

## Phase 1B: Multi-Tenant Foundation
11. **Tenant Isolation Middleware** ‚Üí Data scoping and security
12. **Multi-Site Management** ‚Üí Cross-tenant site operations
13. **Advanced Block System** ‚Üí Dynamic block configuration
14. **Theme Customization** ‚Üí Database-driven theme settings
15. **Site Builder UI** ‚Üí Visual page building interface

## Phase 1C: User Experience Polish
16. **Preview System** ‚Üí Live preview of changes
17. **Form Validation** ‚Üí Comprehensive user input validation
18. **Error Boundaries** ‚Üí Graceful error handling
19. **Performance Optimization** ‚Üí Caching and query optimization
20. **Security Hardening** ‚Üí Rate limiting, input sanitization

# Risks and Mitigations  
## Critical Infrastructure Risks
- **No Authentication System**: **HIGH RISK** - Admin routes completely unprotected
  - *Mitigation*: Implement Supabase Auth as Phase 0 requirement
- **Missing Database Layer**: **HIGH RISK** - No data persistence capability
  - *Mitigation*: Set up Supabase + Prisma before feature development
- **BlockRenderer Not Implemented**: **MEDIUM RISK** - Core block system is theoretical
  - *Mitigation*: Build working BlockRenderer before expanding block types
- **No Multi-Tenant Isolation**: **HIGH RISK** - Data leakage between tenants
  - *Mitigation*: Implement Supabase RLS policies for automatic data scoping
- **File Storage Security**: **MEDIUM RISK** - Uncontrolled file uploads
  - *Mitigation*: Use Supabase Storage with proper access policies

## Technical Challenges
- **Block System Complexity**: Start with simple static blocks before dynamic configuration
- **Multi-Tenant Data Isolation**: Use database-level constraints and middleware validation
- **Theme Customization Conflicts**: Implement validation and preview systems
- **State Management Complexity**: Consider Zustand or Redux Toolkit for admin UI state

## MVP Scope Management
- **Infrastructure First**: Complete Phase 0 before any feature development
- **Single Tenant MVP**: Build for one tenant first, then add multi-tenancy
- **Feature Creep Prevention**: Strict Phase 1 scope - defer advanced features
- **User Experience Balance**: Focus on core workflows over customization
- **Performance Considerations**: Implement proper caching and database indexing

## Development Approach
- **Security First**: Authentication and authorization before features
- **Incremental Implementation**: Build vertically (complete user flows) not horizontally
- **Error Handling**: Comprehensive error boundaries and user feedback
- **Testing Strategy**: Unit tests for utilities, integration tests for auth flows
- **Monitoring**: Add logging and error tracking from day one

# Appendix  
## Existing Architecture Integration
- **Component Patterns**: Uses established admin/modules/ UI patterns from SiteBlock.tsx, BasicBlock.tsx
- **Block System**: Extends existing BlockRenderer.tsx for centralized rendering
- **Database Design**: Follows current schema patterns while adding multi-tenant capabilities
- **Theme System**: Integrates with existing frontend/layout/ component architecture

## Technical Specifications
### Required Technology Stack Additions
**Core Infrastructure:**
- **Database**: Supabase PostgreSQL with Prisma ORM for type-safe operations
- **Authentication**: Supabase Auth (Phase 0-1A) ‚Üí NextAuth.js (Phase 1B+)
- **File Storage**: Supabase Storage for images and theme assets
- **Real-time**: Supabase subscriptions for live updates

**Development Tools:**
- **Form Handling**: React Hook Form + Zod for validation
- **State Management**: Zustand for admin UI state management
- **Error Handling**: React Error Boundaries + Supabase error reporting
- **Multi-tenant Security**: Supabase Row Level Security (RLS) policies

### Implementation Requirements
**Phase 0-1A Implementation:**
- **Authentication**: Supabase Auth with role-based user metadata
- **Data Security**: RLS policies for automatic tenant isolation
- **Data Validation**: Zod schemas + TypeScript interfaces + PostgreSQL constraints
- **File Storage**: Supabase Storage with secure upload policies
- **Real-time Features**: Supabase subscriptions for live admin updates

**Performance & Security:**
- **Database**: Prisma with connection pooling via Supabase
- **Security**: RLS policies, input sanitization, Supabase Auth security
- **Monitoring**: Supabase Dashboard + custom error tracking
- **Real-time Preview**: Live BlockRenderer updates via Supabase subscriptions

## Reference Implementation
- **Admin UI Components**: `src/components/admin/modules/sites/SiteBlock.tsx`
- **Block Architecture**: `src/components/frontend/layout/` and BlockRenderer pattern
- **Database Patterns**: Existing schema structure and relationship patterns
- **Component Organization**: Following modules.mdc architecture guidelines
</PRD>