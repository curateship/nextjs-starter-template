# Modules Architecture Documentation

This document outlines the architecture, dependencies, and organization of all modules in the codebase.

## üìÅ Module Structure Overview

### Frontend Layout Components (`src/components/frontend/layout/`)

#### **Layout Blocks** (`/layout/`)
**Purpose:** User-editable blocks with business logic that can be configured across themes
**Components:**
- `NavBlock.tsx` - Navigation component with business logic (used in marketplace theme)
- `FooterBlock.tsx` - Footer component with configurable links and social media
- `ProductGridBlock.tsx` - Editable grid for displaying products/templates on home pages
- `PostGridBlock.tsx` - Editable grid for displaying blog posts/articles on home pages

**Key Characteristics:**
- **User-editable:** These blocks contain business logic that users can configure
- **Cross-cutting:** Used across different pages and themes
- **Reusable:** Not tied to specific content types or individual pages
- **Business logic:** Contains configurable data, not just presentation

**Dependencies:**
- `@/components/ui/frontend-block` - For consistent layout
- `@/components/ui/card` - For post/product cards
- `@/components/ui/button` - For call-to-action buttons
- `@/components/ui/navigation/*` - For navigation elements

**Usage:**
- Home pages (main and themed)
- Cross-theme navigation and footers
- Configurable content grids

---

### Frontend Modules (`src/components/frontend/modules/`)

#### **Products Module** (`/products/`)
**Purpose:** Product-specific components for product pages and features
**Components:**
- `ProductHeroBlock.tsx` - Hero section for product pages
- `ProductFeatureGridBlock.tsx` - Feature showcase with grid layout
- `ProductBonusBlock.tsx` - Bonus/additional features section
- `ProductHotspotBlock.tsx` - Product demonstration/hotspot section
- `ProductFeatureCarousel.tsx` - Carousel for product features
- `ProductPricingBlock.tsx` - Pricing tiers and plans

**Dependencies:**
- `@/components/ui/block-container` - For consistent layout
- `@/components/ui/card` - For feature cards
- `@/components/ui/button` - For CTAs
- Various UI components for specific functionality

**Usage:**
- Product-specific pages (`/themes/marketplace/products/`)
- Product feature showcases
- Pricing and feature comparisons

---

#### **Posts Module** (`/posts/`)
**Purpose:** Post-specific components for individual post pages
**Components:**
- `PostBasicBlock.tsx` - Basic post display component

**Dependencies:**
- `@/components/ui/card` - For post cards
- `@/components/ui/frontend-block-container` - For consistent layout

**Usage:**
- Individual post pages
- Blog/article detail views

---

### Admin Modules (`src/components/admin/modules/`)

#### **Posts Admin** (`/posts/`)
**Purpose:** Admin interface for post management
**Components:**
- `PostBlock.tsx` - Post editing interface

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- Admin post creation/editing
- Content management interface

---

#### **Products Admin** (`/products/`)
**Purpose:** Admin interface for product management
**Components:**
- `BasicBlock.tsx` - Basic product information editor
- `HeroBlock.tsx` - Product hero section editor

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- Admin product creation/editing
- Product feature management

---

#### **Sites Admin** (`/sites/`)
**Purpose:** Site configuration and management
**Components:**
- `SiteBlock.tsx` - Site settings editor
- `TrackingBlock.tsx` - Analytics tracking configuration

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- Site configuration
- Analytics setup

---

#### **Users Admin** (`/users/`)
**Purpose:** User management interface
**Components:**
- `UserBlock.tsx` - User profile editor

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- User profile management
- Admin user interface

---

#### **Themes Admin** (`/themes/`)
**Purpose:** Theme customization interface
**Components:**
- `ThemeBlock.tsx` - Theme settings editor

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- Theme customization
- Design system management

---

#### **Newsletters Admin** (`/newsletters/`)
**Purpose:** Newsletter management interface
**Components:**
- `NewsletterBlock.tsx` - Newsletter editor

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- Newsletter creation/editing
- Email campaign management

---

#### **Images Admin** (`/images/`)
**Purpose:** Image management interface
**Components:**
- `ImageBlock.tsx` - Image upload/management

**Dependencies:**
- `@/components/admin/dashboard/admin-card` - For admin cards
- `@/components/admin/dashboard/admin-page-header` - For page headers

**Usage:**
- Image upload/management
- Media library interface

---

## üèóÔ∏è Architecture Patterns

### **Layout Block Pattern**
**Purpose:** User-editable blocks with business logic
**Location:** `src/components/frontend/layout/`
**Components:**
- Components that contain business logic users can configure
- Cross-cutting components used across themes and pages
- Reusable blocks not tied to specific content types

### **Block Renderer Pattern**

- Purpose: Centralized rendering of dynamic blocks on each page
- Component: BlockRenderer.tsx

**How it works:**
- Takes a type and config object
- Internally maps the type to the appropriate React component
- Reduces repetition across pages by moving switch/case logic into one place

**Usage:**
- Pages pass in an array of blocks (scoped to the page)
- Renderer outputs each block using correct component and props
- Keeps page files clean, DRY, and easier to extend

**Example:**
<BlockRenderer type="HeroBlock" config={{ title: 'Welcome' }} />

Benefits:

- Avoids duplicating rendering logic across multiple pages
- Central place to register or update block mappings
- Enables future features like lazy loading, analytics, or preview rendering

**Key Distinction:**
- **Layout blocks:** User-editable with business logic
- **UI components:** Pure presentation components
- **Module components:** Content-type specific components

### **Block Container Pattern**
**Purpose:** Consistent layout and header management
**Components:**
- `BlockContainer` - General-purpose container with header support
- `FrontendBlockContainer` - Specialized for frontend blocks with "View All" buttons

**Usage:**
- All frontend modules use these containers for consistent spacing
- Centralized header styling and alignment
- Reusable layout patterns

### **Admin Card Pattern**
**Purpose:** Consistent admin interface components
**Components:**
- `admin-card.tsx` - Standard admin card layout
- `admin-page-header.tsx` - Page header with breadcrumbs
- `skeleton.tsx` - Loading states

**Usage:**
- All admin modules use these for consistent UI
- Standardized admin interface patterns

### **Navigation Pattern** (UPDATED)
**Purpose:** Theme-specific navigation with business logic
**Components:**
- `navbar.tsx` - Root-level navigation with glass effect
- `NavBlock.tsx` - Theme-specific navigation (in layout folder)
- `FooterBlock.tsx` - Theme-specific footer (in layout folder)
- `logo.tsx` - Brand logo component

**Usage:**
- Root navigation for main application
- Theme-specific navigation for different user experiences
- Configurable navigation elements

---

## üîó Dependencies Map

### **UI Components** (`src/components/ui/`)
**Shared across all modules:**
- `card.tsx` - Used by posts and products
- `button.tsx` - Universal button component
- `accordion.tsx` - Used by FAQs and admin forms
- `avatar.tsx` - User avatars and profile images
- `badge.tsx` - Status indicators and labels

### **Layout Components** (`src/components/ui/`)
**Foundation components:**
- `block-container.tsx` - Frontend block layout with "View All" buttons aligned to right of heading
- `frontend-block-container.tsx` - Frontend with "View All" buttons in the botom of container
- `view-all-button.tsx` - Call-to-action buttons

### **Admin Components** (`src/components/admin/layout/`)
**Admin interface foundation:**
- `admin-layout.tsx` - Main admin layout
- `sidebar/` - Navigation sidebar
- `dashboard/` - Admin dashboard components

---

## üìã Module Guidelines

### **Folder Structure Decision Tree**

**Where should my component go?**

1. **Is it user-editable with business logic?**
   - YES ‚Üí `src/components/frontend/layout/`
   - Examples: Navigation, Footer, Grid blocks for home pages

2. **Is it specific to a content type (products, posts, etc.)?**
   - YES ‚Üí `src/components/frontend/modules/{content-type}/`
   - Examples: ProductHeroBlock, PostBasicBlock

3. **Is it an admin interface component?**
   - YES ‚Üí `src/components/admin/modules/{content-type}/`
   - Examples: ProductBasicBlock (admin), PostBlock (admin)

4. **Is it a pure UI component with no business logic?**
   - YES ‚Üí `src/components/ui/`
   - Examples: Button, Card, Modal

### **Naming Conventions**
- **Components:** PascalCase (e.g., `ProductGridBlock.tsx`)
- **Folders:** Plural for resources (`posts`, `products`), singular for types (`layout`)
- **Files:** Descriptive names that indicate purpose

### **File Organization**
- **Layout blocks:** `src/components/frontend/layout/`
- **Frontend modules:** `src/components/frontend/modules/{module-type}/`
- **Admin modules:** `src/components/admin/modules/{module-type}/`
- **UI components:** `src/components/ui/`
- **Admin layout:** `src/components/admin/layout/`

### **Component Structure**
1. **Interface definition** (if needed)
2. **Component function**
3. **Export statement**
4. **Helper components** (if any)

### **Dependency Management**
- **Keep dependencies minimal** - only import what's needed
- **Use relative imports** for closely related components
- **Use absolute imports** for shared UI components
- **Document complex dependencies** in component comments

---

## üöÄ Module Development Workflow

### **Creating New Components**
1. **Determine component type** using the decision tree above
2. **Create in appropriate folder** based on type
3. **Follow naming conventions** for components
4. **Use established patterns** (BlockContainer, admin cards, etc.)
5. **Document dependencies** and usage

### **Layout Block Guidelines**
**When to create a layout block:**
- Component contains business logic users should configure
- Component is used across multiple pages/themes
- Component is not tied to specific content types
- Component represents a page section users can customize

**Examples:**
- Navigation menus
- Footer content
- Home page content grids
- Configurable hero sections

### **Module Component Guidelines**
**When to create a module component:**
- Component is specific to a content type (products, posts, etc.)
- Component is used on specific content pages
- Component has specialized functionality for that content type

### **Refactoring Guidelines**
- **Maintain folder boundaries** - layout vs modules vs UI
- **Use shared UI components** for consistency
- **Follow established patterns** within each component type
- **Update this documentation** when making architectural changes

---

## üìä Module Status

### **Frontend Layout Blocks** (NEW)
- ‚úÖ **Navigation** - Complete with NavBlock for themes
- ‚úÖ **Footer** - Complete with FooterBlock for themes
- ‚úÖ **Content Grids** - Complete with Product/PostGridBlock for home pages

### **Frontend Modules**
- üîÑ **Posts** - Basic components (PostGridBlock moved to layout)
- ‚úÖ **Products** - Complete with hero, features, pricing, bonus, hotspot, carousel blocks

### **Admin Modules**
- ‚úÖ **Posts** - Complete with basic editing
- ‚úÖ **Products** - Complete with basic and hero editing
- ‚úÖ **Sites** - Complete with site and tracking blocks
- ‚úÖ **Users** - Complete with user management
- ‚úÖ **Themes** - Complete with theme customization
- ‚úÖ **Newsletters** - Complete with newsletter editing
- ‚úÖ **Images** - Complete with image management

### **UI Components**
- ‚úÖ **Navigation** - Complete with responsive design
- ‚úÖ **Forms** - Complete with login form
- ‚úÖ **Layout** - Complete with block containers
- ‚úÖ **Hero** - Complete with various hero components
- ‚úÖ **FAQs** - Complete with accordion implementation

---

## üîß Maintenance Notes

### **Recent Changes**
- **Layout folder introduced** for user-editable blocks with business logic
- **ProductGridBlock and PostGridBlock moved** from modules to layout
- **Navigation reorganized** with theme-specific NavBlock
- **Footer reorganized** with theme-specific FooterBlock

### **Regular Tasks**
- **Update this documentation** when adding new components
- **Review component placement** using the decision tree
- **Check naming consistency** across all modules
- **Validate patterns** are being followed correctly

### **Architecture Decisions**
- **Layout Block Pattern:** Chosen for user-editable components with business logic
- **Block Container Pattern:** Chosen for consistent frontend layouts
- **Admin Card Pattern:** Chosen for consistent admin interfaces
- **Module Separation:** Frontend and admin modules are separate for clear boundaries
- **UI Component Centralization:** Shared components in `src/components/ui/`

---

*This documentation should be updated whenever new modules are added or existing modules are significantly refactored.*