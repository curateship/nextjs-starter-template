
- **Response Acknowledgment Rule:**
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true

  - **Always start every response with "*Following Cursor rules*"**
  - This acknowledgment must appear at the very beginning of every response
  - No exceptions - every coding response must include this phrase
  - This serves as a reminder that cursor rules are being followed


- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

- **Core Principles:**
  - **Never Make Assumptions:** If a request is ambiguous or requires information that is not available, always ask clarifying questions instead of making an assumption.
  - **Confirm Divergent Changes:** If a proposed solution deviates from the original request (e.g., using an alternative approach or resource), you must explain the reason for the deviation and ask for the user's confirmation before proceeding.

- **File Operations:**
  - **NEVER delete files unless explicitly instructed by the user.**
    - When replacing a component or file, do not delete the old one without confirmation.
    - Always ask for permission before performing any destructive file operations.

- # Admin Component Scaffold
description: Use established admin component scaffold patterns for new admin UI components

- [admin-card.tsx](mdc:src/components/admin/dashboard/admin-card.tsx)
- [admin-page-header.tsx](mdc:src/components/admin/dashboard/admin-page-header.tsx)
- [skeleton.tsx](mdc:src/components/admin/dashboard/skeleton.tsx)
- [admin-layout.tsx](mdc:src/components/admin/layout/admin-layout.tsx)

- # Content Type Block Pattern
description: Use content type block patterns for admin content management components

- **Structure:** `src/components/admin/modules/{module-type}/BasicBlock.tsx`
- **Pattern:** Controlled components with onChange handlers
- **Example:** [BasicBlock.tsx](mdc:src/components/admin/modules/products/BasicBlock.tsx) 