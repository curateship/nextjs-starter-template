"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { AlertCircle, CheckCircle2, ImageIcon } from "lucide-react"
import { ImagePicker } from "@/components/admin/image-library/ImagePicker"
import { getActiveThemesAction } from "@/lib/actions/themes/theme-actions"
import { checkSubdomainAvailabilityAction } from "@/lib/actions/sites/site-actions"
import type { Theme } from "@/lib/supabase/themes"
import { FontSelector } from "@/components/admin/page-builder/FontSelector"

interface SiteDashboardProps {
  siteName: string
  status: string
  themeId: string
  subdomain?: string
  customDomain?: string
  favicon?: string
  isEditMode?: boolean
  fontFamily?: string
  secondaryFontFamily?: string
  onSiteNameChange: (value: string) => void
  onStatusChange: (value: string) => void
  onThemeIdChange: (value: string) => void
  onSubdomainChange?: (value: string) => void
  onCustomDomainChange?: (value: string) => void
  onFaviconChange?: (value: string) => void
  onFontFamilyChange?: (value: string) => void
  onSecondaryFontFamilyChange?: (value: string) => void
}

export function SiteDashboard({
  siteName,
  status,
  themeId,
  subdomain = "",
  customDomain = "",
  favicon = "",
  isEditMode = false,
  fontFamily = "playfair-display",
  secondaryFontFamily = "inter",
  onSiteNameChange,
  onStatusChange,
  onThemeIdChange,
  onSubdomainChange,
  onCustomDomainChange,
  onFaviconChange,
  onFontFamilyChange,
  onSecondaryFontFamilyChange,
}: SiteDashboardProps) {
  const [themes, setThemes] = useState<Theme[]>([])
  const [themesLoading, setThemesLoading] = useState(true)
  const [subdomainManuallyEdited, setSubdomainManuallyEdited] = useState(false)
  const [subdomainStatus, setSubdomainStatus] = useState<{
    checking: boolean
    available: boolean | null
    suggestion?: string
  }>({ checking: false, available: null })
  const [showFaviconPicker, setShowFaviconPicker] = useState(false)

  // Load themes on component mount
  useEffect(() => {
    loadThemes()
  }, [])

  // Generate subdomain from site name
  const generateSubdomain = (name: string) => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
  }

  // Handle site name change and auto-generate subdomain if subdomain hasn't been manually edited
  const handleSiteNameChange = (name: string) => {
    onSiteNameChange(name)
    if (!subdomainManuallyEdited && onSubdomainChange) {
      const newSubdomain = generateSubdomain(name)
      onSubdomainChange(newSubdomain)
    }
  }

  // Handle manual subdomain changes
  const handleSubdomainChange = (newSubdomain: string) => {
    if (!onSubdomainChange) return
    
    if (newSubdomain === '') {
      // If user clears the field, reset to auto-generation
      setSubdomainManuallyEdited(false)
      onSubdomainChange(generateSubdomain(siteName))
    } else {
      setSubdomainManuallyEdited(true)
      onSubdomainChange(newSubdomain)
    }
  }

  // Check subdomain availability when subdomain changes (only in create mode)
  useEffect(() => {
    if (!isEditMode && subdomain.trim()) {
      checkSubdomainAvailability(subdomain)
    } else {
      setSubdomainStatus({ checking: false, available: null })
    }
  }, [subdomain, isEditMode])

  // Initialize subdomain manually edited state based on whether subdomain differs from auto-generated
  useEffect(() => {
    if (siteName && subdomain) {
      const autoGeneratedSubdomain = generateSubdomain(siteName)
      setSubdomainManuallyEdited(subdomain !== autoGeneratedSubdomain)
    }
  }, [siteName, subdomain])

  const loadThemes = async () => {
    try {
      setThemesLoading(true)
      const { data, error } = await getActiveThemesAction()
      
      if (error) {
        console.error('Error loading themes:', error)
        return
      }
      
      if (data) {
        setThemes(data)
      }
    } catch (err) {
      console.error('Error loading themes:', err)
    } finally {
      setThemesLoading(false)
    }
  }

  const checkSubdomainAvailability = async (subdomainToCheck: string) => {
    if (!subdomainToCheck) {
      setSubdomainStatus({ checking: false, available: null })
      return
    }

    try {
      setSubdomainStatus({ checking: true, available: null })
      const { available, suggestion } = await checkSubdomainAvailabilityAction(subdomainToCheck)
      setSubdomainStatus({ 
        checking: false, 
        available, 
        suggestion: available ? undefined : suggestion 
      })
    } catch (err) {
      console.error('Error checking subdomain:', err)
      setSubdomainStatus({ checking: false, available: null })
    }
  }


  return (
    <>
    <Card className="shadow-sm">
      <CardHeader>
        <CardTitle>Site Information</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Site Name */}
        <div className="space-y-2">
          <Label htmlFor="siteName">Site Name *</Label>
          <div className="relative">
            <Input
              id="siteName"
              value={siteName}
              onChange={(e) => handleSiteNameChange(e.target.value)}
              placeholder="Enter site name (e.g., mysite)"
              required
              className={
                subdomainStatus.available === false 
                  ? "pr-10 border-red-300 focus:border-red-500" 
                  : subdomainStatus.available === true 
                  ? "pr-10 border-green-300 focus:border-green-500"
                  : ""
              }
            />
            {subdomainStatus.checking && (
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400"></div>
              </div>
            )}
            {!subdomainStatus.checking && subdomainStatus.available === true && (
              <CheckCircle2 className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-green-500" />
            )}
            {!subdomainStatus.checking && subdomainStatus.available === false && (
              <AlertCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-red-500" />
            )}
          </div>
          <p className="text-xs text-muted-foreground">
            This will be the name of your site
          </p>
        </div>

        {/* Site Subdomain */}
        {onSubdomainChange && (
          <div className="space-y-2">
            <Label htmlFor="subdomain">Site URL</Label>
            <div className="relative">
              <Input
                id="subdomain"
                value={subdomain}
                onChange={(e) => handleSubdomainChange(e.target.value)}
                placeholder="site-url"
                className={
                  subdomainStatus.available === false 
                    ? "pr-10 border-red-300 focus:border-red-500" 
                    : subdomainStatus.available === true 
                    ? "pr-10 border-green-300 focus:border-green-500"
                    : ""
                }
              />
              {subdomainStatus.checking && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400"></div>
                </div>
              )}
              {!subdomainStatus.checking && subdomainStatus.available === true && (
                <CheckCircle2 className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-green-500" />
              )}
              {!subdomainStatus.checking && subdomainStatus.available === false && (
                <AlertCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-red-500" />
              )}
            </div>
            <div className="text-xs text-muted-foreground space-y-1">
              <p>
                {subdomainManuallyEdited 
                  ? "Custom subdomain. Clear this field to auto-generate from site name again." 
                  : "Auto-generated from site name. You can edit this to customize the URL."}
              </p>
              <p>
                Your site will be available at: <strong>{subdomain || 'your-site'}.domain.com</strong>
              </p>
              {subdomainStatus.available === false && subdomainStatus.suggestion && (
                <p className="text-amber-600">
                  Subdomain not available. Suggested: <strong>{subdomainStatus.suggestion}.domain.com</strong>
                </p>
              )}
              {subdomainStatus.available === true && (
                <p className="text-green-600">
                  Subdomain is available!
                </p>
              )}
            </div>
          </div>
        )}

        {/* Custom Domain */}
        {onCustomDomainChange && (
          <div className="space-y-2">
            <label htmlFor="customDomain" className="text-sm font-medium text-gray-700">
              Custom Domain
            </label>
            <Input
              id="customDomain"
              value={customDomain}
              onChange={(e) => onCustomDomainChange(e.target.value)}
              placeholder="example.com or localhost:3000"
            />
            <div className="text-xs text-muted-foreground">
              <p>Enter a custom domain to serve this site from (e.g., localhost:3000 for local development)</p>
              {customDomain && (
                <p className="text-blue-600 mt-1">
                  Site will be accessible at: <strong>{customDomain}</strong>
                </p>
              )}
            </div>
          </div>
        )}

        {/* Theme Selection */}
        <div className="space-y-2">
            <Select value={themeId} onValueChange={onThemeIdChange}>
              <SelectTrigger>
                <SelectValue placeholder={themesLoading ? "Loading themes..." : "Select a theme"} />
              </SelectTrigger>
              <SelectContent>
                {themesLoading ? (
                  <SelectItem value="loading" disabled>
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400"></div>
                      <span>Loading themes...</span>
                    </div>
                  </SelectItem>
                ) : themes.length === 0 ? (
                  <SelectItem value="no-themes" disabled>
                    No active themes available
                  </SelectItem>
                ) : (
                  themes.map((theme) => (
                    <SelectItem key={theme.id} value={theme.id}>
                      {theme.name}
                    </SelectItem>
                  ))
                )}
              </SelectContent>
            </Select>
            {themeId && themes.length > 0 && (
              <div className="text-xs text-muted-foreground">
                {(() => {
                  const selectedTheme = themes.find(t => t.id === themeId)
                  return selectedTheme ? (
                    <div className="flex items-center justify-between">
                      <span>Selected: {selectedTheme.name}</span>
                    </div>
                  ) : null
                })()}
              </div>
            )}
        </div>

        {/* Font Selectors - Two Column Layout */}
        {(onFontFamilyChange || onSecondaryFontFamilyChange) && (
          <div className="space-y-2">
            <h3 className="text-lg font-semibold">Typography</h3>
            <div className="grid grid-cols-2 gap-4">
              {onFontFamilyChange && (
                <FontSelector
                  value={fontFamily}
                  onChange={onFontFamilyChange}
                  label="Primary Font"
                  description="Used for headings and titles"
                />
              )}
              {onSecondaryFontFamilyChange && (
                <FontSelector
                  value={secondaryFontFamily}
                  onChange={onSecondaryFontFamilyChange}
                  label="Secondary Font"
                  description="Used for body text and content"
                />
              )}
            </div>
          </div>
        )}

        {/* Favicon */}
        {onFaviconChange && (
          <div className="space-y-2">
            <label htmlFor="favicon" className="text-sm font-medium text-gray-700">
              Site Favicon
            </label>
            <div className="relative">
              {favicon ? (
                <div 
                  className="relative w-16 h-16 rounded-lg overflow-hidden bg-muted cursor-pointer hover:opacity-90 transition-opacity"
                  onClick={() => setShowFaviconPicker(true)}
                >
                  <img 
                    src={favicon} 
                    alt="Favicon preview" 
                    className="w-16 h-16 object-cover"
                  />
                  <div className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity bg-black/50">
                    <div className="text-white text-center">
                      <ImageIcon className="mx-auto h-4 w-4 mb-1" />
                      <p className="text-xs">Change</p>
                    </div>
                  </div>
                </div>
              ) : (
                <div 
                  className="flex items-center justify-center w-16 h-16 rounded-lg border-2 border-dashed border-muted-foreground/25 bg-muted/50 cursor-pointer hover:bg-muted/70 hover:border-muted-foreground/40 transition-all"
                  onClick={() => setShowFaviconPicker(true)}
                >
                  <div className="text-center">
                    <ImageIcon className="mx-auto h-4 w-4 text-muted-foreground/50" />
                    <p className="mt-1 text-xs text-muted-foreground">Select</p>
                  </div>
                </div>
              )}
            </div>
            <div className="text-xs text-muted-foreground">
              <p>Upload a square image for your site's favicon (recommended: 32x32px or 64x64px)</p>
            </div>
          </div>
        )}

        {/* Status */}
        <div className="space-y-2">
          <Select value={status} onValueChange={onStatusChange}>
            <SelectTrigger>
              <SelectValue placeholder="Select status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="draft">Draft</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="inactive">Inactive</SelectItem>
            </SelectContent>
          </Select>
        </div>

      </CardContent>
    </Card>

    {/* Favicon Image Picker Modal */}
    {onFaviconChange && (
      <ImagePicker
        open={showFaviconPicker}
        onOpenChange={setShowFaviconPicker}
        onSelectImage={(imageUrl) => {
          onFaviconChange(imageUrl)
          setShowFaviconPicker(false)
        }}
        currentImageUrl={favicon}
      />
    )}
  </>
  )
}

// claude.md followed