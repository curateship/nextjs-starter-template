"use client"

import { useState, useEffect } from "react"
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogPortal,
  DialogOverlay,
} from "@/components/ui/dialog"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ImagePicker } from "@/components/admin/layout/image-library/ImagePicker"
import { RichTextEditor } from "@/components/admin/layout/page-builder/RichTextEditor"
import { ImageIcon, X } from "lucide-react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import Link from "next/link"
import { updatePostAction } from "@/lib/actions/post-actions"
import type { Post, UpdatePostData } from "@/lib/actions/post-actions"
import type { SiteWithTheme } from "@/lib/actions/site-actions"

interface PostSettingsModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  post: Post | null
  site: SiteWithTheme | null
  onSuccess?: (updatedPost: Post) => void
}

export function PostSettingsModal({ 
  open, 
  onOpenChange, 
  post, 
  site,
  onSuccess 
}: PostSettingsModalProps) {
  const [formData, setFormData] = useState<UpdatePostData>({})
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [saveMessage, setSaveMessage] = useState<string | null>(null)
  const [slugManuallyEdited, setSlugManuallyEdited] = useState(false)
  const [showImagePicker, setShowImagePicker] = useState(false)

  // Generate slug from title
  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
  }

  // Handle title change and auto-generate slug if slug hasn't been manually edited
  const handleTitleChange = (title: string) => {
    setFormData(prev => ({
      ...prev,
      title,
      slug: slugManuallyEdited ? prev.slug : generateSlug(title)
    }))
  }

  // Handle manual slug changes
  const handleSlugChange = (slug: string) => {
    if (slug === '') {
      // If user clears the field, reset to auto-generation
      setSlugManuallyEdited(false)
      setFormData(prev => ({ ...prev, slug: generateSlug(prev.title || '') }))
    } else {
      setSlugManuallyEdited(true)
      setFormData(prev => ({ ...prev, slug }))
    }
  }

  // Handle featured image changes
  const handleImageChange = async (newImageUrl: string) => {
    setFormData(prev => ({ ...prev, featured_image: newImageUrl }))
  }

  // Handle removing the featured image
  const handleRemoveImage = async () => {
    setFormData(prev => ({ ...prev, featured_image: '' }))
  }


  // Initialize form data when post changes
  useEffect(() => {
    if (post) {
      setFormData({
        title: post.title,
        slug: post.slug,
        meta_description: post.meta_description || '',
        meta_keywords: post.meta_keywords || '',
        featured_image: post.featured_image || '',
        excerpt: post.excerpt || '',
        content: post.content || '',
        is_published: post.is_published
      })
      
      // Check if slug was manually edited (different from auto-generated)
      const autoGeneratedSlug = generateSlug(post.title)
      setSlugManuallyEdited(post.slug !== autoGeneratedSlug)
      
      // Reset states
      setError(null)
      setSaveMessage(null)
    }
  }, [post])


  // Handle saving as draft
  const handleSaveDraft = async () => {
    if (!formData.title?.trim()) {
      setError('Post title is required')
      return
    }

    if (!post) {
      setError('No post selected')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSaveMessage(null)
      
      const draftData = { ...formData, is_published: false }
      const { data, error: actionError } = await updatePostAction(post.id, draftData)
      
      if (actionError) {
        setError(actionError)
        return
      }
      
      if (data) {
        setSaveMessage('Post saved as draft successfully!')
        
        // Call success callback
        if (onSuccess) {
          onSuccess(data)
        }
        
        // Clear success message and close modal after 1.5 seconds
        setTimeout(() => {
          setSaveMessage(null)
          onOpenChange(false)
        }, 1500)
      }
    } catch (err) {
      setError('Failed to save post as draft')
    } finally {
      setSaving(false)
    }
  }

  // Handle publishing
  const handlePublish = async () => {
    if (!formData.title?.trim()) {
      setError('Post title is required')
      return
    }

    if (!post) {
      setError('No post selected')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSaveMessage(null)
      
      const publishData = { ...formData, is_published: true }
      const { data, error: actionError } = await updatePostAction(post.id, publishData)
      
      if (actionError) {
        setError(actionError)
        return
      }
      
      if (data) {
        setSaveMessage('Post published successfully!')
        
        // Call success callback
        if (onSuccess) {
          onSuccess(data)
        }
        
        // Clear success message and close modal after 1.5 seconds
        setTimeout(() => {
          setSaveMessage(null)
          onOpenChange(false)
        }, 1500)
      }
    } catch (err) {
      setError('Failed to publish post')
    } finally {
      setSaving(false)
    }
  }

  // Handle form submission (default to save as draft)
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await handleSaveDraft()
  }

  if (!post) {
    return null
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogPortal>
        <div className="fixed inset-0 z-50 bg-black/50 flex items-start justify-center overflow-y-auto p-4"
             onClick={(e) => e.target === e.currentTarget && onOpenChange(false)}>
          <div className="bg-background rounded-lg border shadow-lg w-[840px] max-w-[95vw] p-6 relative my-8"
               style={{ width: '840px', maxWidth: '95vw' }}
               onClick={(e) => e.stopPropagation()}>
            <DialogPrimitive.Close className="absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden">
              <X className="h-4 w-4" />
              <span className="sr-only">Close</span>
            </DialogPrimitive.Close>
        <DialogHeader>
          <DialogTitle>Post Settings</DialogTitle>
          <DialogDescription>
            Configure settings for "{post.title}"
          </DialogDescription>
        </DialogHeader>

        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-800 text-sm">{error}</p>
          </div>
        )}

        {saveMessage && (
          <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
            <p className="text-green-800 text-sm">{saveMessage}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Configure the basic settings for this post
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Post Title */}
              <div className="space-y-2">
                <Label htmlFor="modal-title">Post Title *</Label>
                <Input
                  id="modal-title"
                  value={formData.title || ''}
                  onChange={(e) => handleTitleChange(e.target.value)}
                  placeholder="Enter post title"
                  required
                />
              </div>

              {/* Post Slug */}
              <div className="space-y-2">
                <Label htmlFor="modal-slug">Post URL</Label>
                <Input
                  id="modal-slug"
                  value={formData.slug || ''}
                  onChange={(e) => handleSlugChange(e.target.value)}
                  placeholder="post-url-slug"
                />
                <p className="text-xs text-muted-foreground">
                  {slugManuallyEdited 
                    ? "Custom URL slug. Clear this field to auto-generate from title again." 
                    : "Auto-generated from title. You can edit this to customize the URL."}
                </p>
              </div>

              {/* Featured Image */}
              <div className="space-y-2">
                <Label htmlFor="featured_image">Featured Image</Label>
                <div className="mt-2">
                  {formData.featured_image ? (
                    <div className="relative rounded-lg overflow-hidden bg-muted">
                      <img 
                        src={formData.featured_image} 
                        alt="Featured image preview" 
                        className="w-full h-48 object-cover"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-background/80 to-transparent" />
                      <button
                        type="button"
                        onClick={handleRemoveImage}
                        className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                      >
                        <X className="h-4 w-4" />
                      </button>
                      <div className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity bg-black/50 cursor-pointer"
                        onClick={() => setShowImagePicker(true)}
                      >
                        <div className="text-white text-center">
                          <ImageIcon className="mx-auto h-8 w-8 mb-2" />
                          <p className="text-sm font-medium">Click to change image</p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div 
                      className="flex items-center justify-center h-48 rounded-lg border-2 border-dashed border-muted-foreground/25 bg-muted/50 cursor-pointer hover:bg-muted/70 hover:border-muted-foreground/40 transition-all"
                      onClick={() => setShowImagePicker(true)}
                    >
                      <div className="text-center">
                        <ImageIcon className="mx-auto h-8 w-8 text-muted-foreground/50" />
                        <p className="mt-2 text-sm text-muted-foreground">Click to select featured image</p>
                      </div>
                    </div>
                  )}
                </div>
                <p className="text-xs text-muted-foreground">
                  Optional featured image for this post
                </p>
              </div>

              {/* Post Excerpt */}
              <div className="space-y-2">
                <Label htmlFor="excerpt">Post Excerpt</Label>
                <Textarea
                  id="excerpt"
                  value={formData.excerpt || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, excerpt: e.target.value }))}
                  placeholder="A brief summary of your post content"
                  rows={3}
                />
                <p className="text-xs text-muted-foreground">
                  Brief summary shown in post listings and previews
                </p>
              </div>

              {/* Post Content */}
              <div className="space-y-2">
                <Label htmlFor="content">Post Content</Label>
                <RichTextEditor
                  content={{
                    content: formData.content || '',
                    hideHeader: true,
                    hideEditorHeader: true
                  }}
                  onContentChange={(content) => setFormData(prev => ({ ...prev, content: content.content }))}
                />
                <p className="text-xs text-muted-foreground">
                  Rich text content for the post body
                </p>
              </div>
                
              {/* Current Status Display */}
              <div className="p-3 bg-muted/50 rounded-lg">
                <div className="flex items-center space-x-2">
                  <div className={`w-2 h-2 rounded-full ${
                    post?.is_published ? 'bg-green-500' : 'bg-gray-400'
                  }`} />
                  <span className="text-sm font-medium">
                    Current Status: {post?.is_published ? 'Published' : 'Draft'}
                  </span>
                </div>
                <p className="text-xs text-muted-foreground mt-1">
                  {post?.is_published 
                    ? 'This post is visible to visitors' 
                    : 'This post is hidden from visitors'}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* SEO Settings */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>SEO Settings</CardTitle>
              <CardDescription>
                Optimize this post for search engines
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Meta Description */}
              <div className="space-y-2">
                <Label htmlFor="modal-meta_description">Meta Description</Label>
                <Textarea
                  id="modal-meta_description"
                  value={formData.meta_description || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, meta_description: e.target.value }))}
                  placeholder="A brief description of this post for search engines"
                  rows={3}
                />
                <p className="text-xs text-muted-foreground">
                  Recommended length: 150-160 characters ({(formData.meta_description || '').length}/160)
                </p>
              </div>

              {/* Meta Keywords */}
              <div className="space-y-2">
                <Label htmlFor="modal-meta_keywords">Meta Keywords</Label>
                <Input
                  id="modal-meta_keywords"
                  value={formData.meta_keywords || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, meta_keywords: e.target.value }))}
                  placeholder="keyword1, keyword2, keyword3"
                />
                <p className="text-xs text-muted-foreground">
                  Separate keywords with commas
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
              <CardDescription>
                Common post management tasks
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-wrap gap-2">
                <Button variant="outline" size="sm" asChild>
                  <Link href={`/admin/posts/builder/${post.slug}`}>
                    Edit Post
                  </Link>
                </Button>
                <Button variant="outline" size="sm" asChild>
                  <a 
                    href={site ? `/posts/${post.slug}` : '#'} 
                    target="_blank" 
                    rel="noopener noreferrer"
                  >
                    Preview Post
                  </a>
                </Button>
              </div>
            </CardContent>
          </Card>


          {/* Form Actions */}
          <div className="flex justify-between pt-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => onOpenChange(false)}
              disabled={saving}
            >
              Cancel
            </Button>
            <div className="flex space-x-2">
              <Button 
                type="submit" 
                variant="outline"
                disabled={saving}
              >
                {saving ? "Saving..." : "Save as Draft"}
              </Button>
              <Button 
                type="button" 
                onClick={handlePublish}
                disabled={saving}
              >
                {saving ? "Publishing..." : "Publish"}
              </Button>
            </div>
          </div>
        </form>

        {/* Image Picker Modal */}
        <ImagePicker
          open={showImagePicker}
          onOpenChange={setShowImagePicker}
          onSelectImage={(imageUrl) => {
            handleImageChange(imageUrl)
            setShowImagePicker(false)
          }}
          currentImageUrl={formData.featured_image || ''}
        />
          </div>
        </div>
      </DialogPortal>
    </Dialog>
  )
}