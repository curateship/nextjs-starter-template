"use client"

import { useState, useEffect } from "react"
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { CheckCircle } from "lucide-react"
import Link from "next/link"
import type { Page, UpdatePageData } from "@/lib/actions/page-actions"
import type { SiteWithTheme } from "@/lib/actions/site-actions"

interface PageSettingsModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  page: Page | null
  site: SiteWithTheme | null
  onSuccess?: (updatedPage: Page) => void
}

export function PageSettingsModal({ 
  open, 
  onOpenChange, 
  page, 
  site,
  onSuccess 
}: PageSettingsModalProps) {
  const [formData, setFormData] = useState<UpdatePageData>({})
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [saveMessage, setSaveMessage] = useState<string | null>(null)
  const [lastSavedAt, setLastSavedAt] = useState<Date | null>(null)
  const [slugManuallyEdited, setSlugManuallyEdited] = useState(false)

  // Generate slug from title
  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
  }

  // Handle title change and auto-generate slug if slug hasn't been manually edited
  const handleTitleChange = (title: string) => {
    setFormData(prev => ({
      ...prev,
      title,
      slug: slugManuallyEdited ? prev.slug : generateSlug(title)
    }))
  }

  // Handle manual slug changes
  const handleSlugChange = (slug: string) => {
    if (slug === '') {
      // If user clears the field, reset to auto-generation
      setSlugManuallyEdited(false)
      setFormData(prev => ({ ...prev, slug: generateSlug(prev.title || '') }))
    } else {
      setSlugManuallyEdited(true)
      setFormData(prev => ({ ...prev, slug }))
    }
  }


  // Initialize form data when page changes
  useEffect(() => {
    if (page) {
      setFormData({
        title: page.title,
        slug: page.slug,
        meta_description: page.meta_description || '',
        is_homepage: page.is_homepage,
        is_published: page.is_published
      })
      
      // Check if slug was manually edited (different from auto-generated)
      const autoGeneratedSlug = generateSlug(page.title)
      setSlugManuallyEdited(page.slug !== autoGeneratedSlug)
      
      // Only reset error state, preserve success message if it exists
      setError(null)
      // Don't reset saveMessage here as it clears the success message after save
    }
  }, [page])

  // Clear messages when modal is closed
  useEffect(() => {
    if (!open) {
      setSaveMessage(null)
      setError(null)
    }
  }, [open])

  // Handle saving as draft
  const handleSaveDraft = async () => {
    if (!formData.title?.trim()) {
      setError('Page title is required')
      return
    }

    if (!page) {
      setError('No page selected')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSaveMessage(null)
      
      const draftData = { ...formData, is_published: false }
      const response = await fetch(`/api/pages/${page.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(draftData),
      })
      
      const result = await response.json()
      
      if (!response.ok || result.error) {
        setError(result.error || 'Failed to save page as draft')
        return
      }
      
      if (result.data) {
        setSaveMessage('Page saved as draft')
        setLastSavedAt(new Date())
        
        // Call success callback
        if (onSuccess) {
          onSuccess(result.data)
        }
        
        // Clear success message after 3 seconds
        setTimeout(() => {
          setSaveMessage(null)
        }, 3000)
      }
    } catch (err) {
      setError('Failed to save page as draft')
    } finally {
      setSaving(false)
    }
  }

  // Handle publishing
  const handlePublish = async () => {
    if (!formData.title?.trim()) {
      setError('Page title is required')
      return
    }

    if (!page) {
      setError('No page selected')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSaveMessage(null)
      
      const publishData = { ...formData, is_published: true }
      const response = await fetch(`/api/pages/${page.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(publishData),
      })
      
      const result = await response.json()
      
      if (!response.ok || result.error) {
        setError(result.error || 'Failed to publish page')
        return
      }
      
      if (result.data) {
        setSaveMessage(page?.is_published ? 'Page updated' : 'Page published')
        setLastSavedAt(new Date())
        
        // Update the form data to reflect the new published state
        setFormData(prev => ({ ...prev, is_published: true }))
        
        // Call success callback
        if (onSuccess) {
          onSuccess(result.data)
        }
        
        // Clear success message after 3 seconds
        setTimeout(() => {
          setSaveMessage(null)
        }, 3000)
      }
    } catch (err) {
      setError('Failed to publish page')
    } finally {
      setSaving(false)
    }
  }

  // Handle form submission (default to save as draft)
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await handleSaveDraft()
  }

  if (!page) {
    return null
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[840px] max-w-[95vw]" style={{ width: '840px', maxWidth: '95vw' }}>
        <DialogHeader>
          <DialogTitle>Page Settings</DialogTitle>
          <DialogDescription>
            Configure settings for "{page.title}"
          </DialogDescription>
        </DialogHeader>

        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-800 text-sm">{error}</p>
          </div>
        )}


        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Configure the basic settings for this page
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Page Title */}
              <div className="space-y-2">
                <Label htmlFor="modal-title">Page Title *</Label>
                <Input
                  id="modal-title"
                  value={formData.title || ''}
                  onChange={(e) => handleTitleChange(e.target.value)}
                  placeholder="Enter page title"
                  required
                />
              </div>

              {/* Page Slug */}
              <div className="space-y-2">
                <Label htmlFor="modal-slug">Page URL</Label>
                <Input
                  id="modal-slug"
                  value={formData.slug || ''}
                  onChange={(e) => handleSlugChange(e.target.value)}
                  placeholder="page-url-slug"
                />
                <p className="text-xs text-muted-foreground">
                  {slugManuallyEdited 
                    ? "Custom URL slug. Clear this field to auto-generate from title again." 
                    : "Auto-generated from title. You can edit this to customize the URL."}
                </p>
              </div>

              {/* Homepage Checkbox */}
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="modal-is_homepage"
                    checked={formData.is_homepage === true}
                    onCheckedChange={(checked) => 
                      setFormData(prev => ({ ...prev, is_homepage: checked === true }))
                    }
                  />
                  <div>
                    <Label htmlFor="modal-is_homepage">Set as homepage</Label>
                    <p className="text-xs text-muted-foreground">
                      This page will be the main landing page for your site
                    </p>
                  </div>
                </div>
                
                {/* Current Status Display */}
                <div className="p-3 bg-muted/50 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <div className={`w-2 h-2 rounded-full ${
                      page?.is_published ? 'bg-green-500' : 'bg-gray-400'
                    }`} />
                    <span className="text-sm font-medium">
                      Current Status: {page?.is_published ? 'Published' : 'Draft'}
                    </span>
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    {page?.is_published 
                      ? 'This page is visible to visitors' 
                      : 'This page is hidden from visitors'}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* SEO Settings */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>SEO Settings</CardTitle>
              <CardDescription>
                Optimize this page for search engines
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Meta Description */}
              <div className="space-y-2">
                <Label htmlFor="modal-meta_description">Meta Description</Label>
                <Textarea
                  id="modal-meta_description"
                  value={formData.meta_description || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, meta_description: e.target.value }))}
                  placeholder="A brief description of this page for search engines"
                  rows={3}
                />
                <p className="text-xs text-muted-foreground">
                  Recommended length: 150-160 characters ({(formData.meta_description || '').length}/160)
                </p>
              </div>

            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
              <CardDescription>
                Common page management tasks
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-wrap gap-2">
                <Button variant="outline" size="sm" asChild>
                  <Link href={`/admin/builder/${site?.id}?page=${page.slug}`}>
                    Edit Content
                  </Link>
                </Button>
                <Button variant="outline" size="sm" asChild>
                  <a 
                    href={site ? `/${page.slug}` : '#'} 
                    target="_blank" 
                    rel="noopener noreferrer"
                  >
                    Preview Page
                  </a>
                </Button>
              </div>
            </CardContent>
          </Card>


          {/* Form Actions */}
          <div className="flex justify-between pt-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => onOpenChange(false)}
              disabled={saving}
            >
              Cancel
            </Button>
            <div className="flex items-center space-x-2">
              {saveMessage && (
                <div className="flex items-center gap-2 px-3 py-1.5 bg-green-50 border border-green-200 rounded-md">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                  <span className="text-green-700 text-sm font-medium">{saveMessage}</span>
                </div>
              )}
              <Button 
                type="submit" 
                variant="outline"
                disabled={saving}
              >
                {saving ? "Saving..." : "Save as Draft"}
              </Button>
              <Button 
                type="button" 
                onClick={handlePublish}
                disabled={saving}
              >
                {saving ? (page?.is_published ? "Saving..." : "Publishing...") : (page?.is_published ? "Save" : "Publish")}
              </Button>
            </div>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}