"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import type { Page, UpdatePageData } from "@/lib/actions/page-actions"

interface EditPageFormProps {
  page: Page
  onSuccess: (page: Page) => void
  onCancel: () => void
}

export function EditPageForm({ page, onSuccess, onCancel }: EditPageFormProps) {
  const [formData, setFormData] = useState<UpdatePageData>({})
  const [slugManuallyEdited, setSlugManuallyEdited] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // Generate slug from title
  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
  }

  // Handle title change and auto-generate slug if slug hasn't been manually edited
  const handleTitleChange = (title: string) => {
    setFormData(prev => ({
      ...prev,
      title,
      slug: slugManuallyEdited ? prev.slug : generateSlug(title)
    }))
  }

  // Handle manual slug changes
  const handleSlugChange = (slug: string) => {
    if (slug === '') {
      // If user clears the field, reset to auto-generation
      setSlugManuallyEdited(false)
      setFormData(prev => ({ ...prev, slug: generateSlug(prev.title || '') }))
    } else {
      setSlugManuallyEdited(true)
      setFormData(prev => ({ ...prev, slug }))
    }
  }

  // Initialize form data
  useEffect(() => {
    if (page) {
      setFormData({
        title: page.title,
        slug: page.slug,
        meta_description: page.meta_description || '',
        is_homepage: page.is_homepage,
        is_published: page.is_published
      })
      
      // Check if slug was manually edited (different from auto-generated)
      const autoGeneratedSlug = generateSlug(page.title)
      setSlugManuallyEdited(page.slug !== autoGeneratedSlug)
    }
  }, [page])

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.title?.trim()) {
      setError('Page title is required')
      return
    }

    try {
      setLoading(true)
      setError(null)
      
      const response = await fetch(`/api/pages/${page.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })
      
      const result = await response.json()
      
      if (!response.ok || result.error) {
        setError(result.error || 'Failed to save page settings')
        return
      }
      
      if (result.data) {
        onSuccess(result.data)
      }
    } catch (err) {
      setError('Failed to save page settings')
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="p-4 text-sm text-red-800 bg-red-100 border border-red-200 rounded-md">
          {error}
        </div>
      )}

      {/* Basic Information */}
      <Card className="shadow-sm">
        <CardHeader>
          <CardTitle>Basic Information</CardTitle>
          <CardDescription>
            Configure the basic settings for this page
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Page Title */}
          <div className="space-y-2">
            <Label htmlFor="title">Page Title *</Label>
            <Input
              id="title"
              value={formData.title || ''}
              onChange={(e) => handleTitleChange(e.target.value)}
              placeholder="Enter page title"
              required
            />
          </div>

          {/* Page Slug */}
          <div className="space-y-2">
            <Label htmlFor="slug">Page URL</Label>
            <Input
              id="slug"
              value={formData.slug || ''}
              onChange={(e) => handleSlugChange(e.target.value)}
              placeholder="page-url-slug"
            />
            <p className="text-xs text-muted-foreground">
              {slugManuallyEdited 
                ? "Custom URL slug. Clear this field to auto-generate from title again." 
                : "Auto-generated from title. You can edit this to customize the URL."}
            </p>
          </div>

          {/* Status Checkboxes */}
          <div className="space-y-4">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="is_published"
                checked={formData.is_published !== false}
                onCheckedChange={(checked) => 
                  setFormData(prev => ({ ...prev, is_published: checked === true }))
                }
              />
              <div>
                <Label htmlFor="is_published">Published</Label>
                <p className="text-xs text-muted-foreground">
                  {formData.is_published !== false ? 'Page is visible to visitors' : 'Page is hidden from visitors'}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Checkbox
                id="is_homepage"
                checked={formData.is_homepage === true}
                onCheckedChange={(checked) => 
                  setFormData(prev => ({ ...prev, is_homepage: checked === true }))
                }
              />
              <div>
                <Label htmlFor="is_homepage">Set as homepage</Label>
                <p className="text-xs text-muted-foreground">
                  This page will be the main landing page for your site
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* SEO Settings */}
      <Card className="shadow-sm">
        <CardHeader>
          <CardTitle>SEO Settings</CardTitle>
          <CardDescription>
            Optimize this page for search engines
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Meta Description */}
          <div className="space-y-2">
            <Label htmlFor="meta_description">Meta Description</Label>
            <Textarea
              id="meta_description"
              value={formData.meta_description || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, meta_description: e.target.value }))}
              placeholder="A brief description of this page for search engines"
              rows={3}
            />
            <p className="text-xs text-muted-foreground">
              Recommended length: 150-160 characters ({(formData.meta_description || '').length}/160)
            </p>
          </div>

        </CardContent>
      </Card>

      {/* Form Actions */}
      <div className="flex items-center justify-end space-x-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit" disabled={loading}>
          {loading ? 'Saving...' : 'Save Settings'}
        </Button>
      </div>
    </form>
  )
}