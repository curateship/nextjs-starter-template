"use client"

import { useState, useEffect } from "react"
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import Link from "next/link"
import { updateProductAction } from "@/lib/actions/product-actions"
import type { Product, UpdateProductData } from "@/lib/actions/product-actions"
import type { SiteWithTheme } from "@/lib/actions/site-actions"

interface ProductSettingsModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  product: Product | null
  site: SiteWithTheme | null
  onSuccess?: (updatedProduct: Product) => void
}

export function ProductSettingsModal({ 
  open, 
  onOpenChange, 
  product, 
  site,
  onSuccess 
}: ProductSettingsModalProps) {
  const [formData, setFormData] = useState<UpdateProductData>({})
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [saveMessage, setSaveMessage] = useState<string | null>(null)
  const [slugManuallyEdited, setSlugManuallyEdited] = useState(false)

  // Generate slug from title
  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
  }

  // Handle title change and auto-generate slug if slug hasn't been manually edited
  const handleTitleChange = (title: string) => {
    setFormData(prev => ({
      ...prev,
      title,
      slug: slugManuallyEdited ? prev.slug : generateSlug(title)
    }))
  }

  // Handle manual slug changes
  const handleSlugChange = (slug: string) => {
    if (slug === '') {
      // If user clears the field, reset to auto-generation
      setSlugManuallyEdited(false)
      setFormData(prev => ({ ...prev, slug: generateSlug(prev.title || '') }))
    } else {
      setSlugManuallyEdited(true)
      setFormData(prev => ({ ...prev, slug }))
    }
  }


  // Initialize form data when product changes
  useEffect(() => {
    if (product) {
      setFormData({
        title: product.title,
        slug: product.slug,
        meta_description: product.meta_description || '',
        meta_keywords: product.meta_keywords || '',
        is_published: product.is_published
      })
      
      // Check if slug was manually edited (different from auto-generated)
      const autoGeneratedSlug = generateSlug(product.title)
      setSlugManuallyEdited(product.slug !== autoGeneratedSlug)
      
      // Reset states
      setError(null)
      setSaveMessage(null)
    }
  }, [product])

  // Handle saving as draft
  const handleSaveDraft = async () => {
    if (!formData.title?.trim()) {
      setError('Product title is required')
      return
    }

    if (!product) {
      setError('No product selected')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSaveMessage(null)
      
      const draftData = { ...formData, is_published: false }
      const { data, error: actionError } = await updateProductAction(product.id, draftData)
      
      if (actionError) {
        setError(actionError)
        return
      }
      
      if (data) {
        setSaveMessage('Product saved as draft successfully!')
        
        // Call success callback
        if (onSuccess) {
          onSuccess(data)
        }
        
        // Clear success message and close modal after 1.5 seconds
        setTimeout(() => {
          setSaveMessage(null)
          onOpenChange(false)
        }, 1500)
      }
    } catch (err) {
      setError('Failed to save product as draft')
    } finally {
      setSaving(false)
    }
  }

  // Handle publishing
  const handlePublish = async () => {
    if (!formData.title?.trim()) {
      setError('Product title is required')
      return
    }

    if (!product) {
      setError('No product selected')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSaveMessage(null)
      
      const publishData = { ...formData, is_published: true }
      const { data, error: actionError } = await updateProductAction(product.id, publishData)
      
      if (actionError) {
        setError(actionError)
        return
      }
      
      if (data) {
        setSaveMessage('Product published successfully!')
        
        // Call success callback
        if (onSuccess) {
          onSuccess(data)
        }
        
        // Clear success message and close modal after 1.5 seconds
        setTimeout(() => {
          setSaveMessage(null)
          onOpenChange(false)
        }, 1500)
      }
    } catch (err) {
      setError('Failed to publish product')
    } finally {
      setSaving(false)
    }
  }

  // Handle form submission (default to save as draft)
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await handleSaveDraft()
  }

  if (!product) {
    return null
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[840px] max-w-[95vw]" style={{ width: '840px', maxWidth: '95vw' }}>
        <DialogHeader>
          <DialogTitle>Product Settings</DialogTitle>
          <DialogDescription>
            Configure settings for "{product.title}"
          </DialogDescription>
        </DialogHeader>

        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-800 text-sm">{error}</p>
          </div>
        )}

        {saveMessage && (
          <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
            <p className="text-green-800 text-sm">{saveMessage}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Information */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Configure the basic settings for this product
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Product Title */}
              <div className="space-y-2">
                <Label htmlFor="modal-title">Product Title *</Label>
                <Input
                  id="modal-title"
                  value={formData.title || ''}
                  onChange={(e) => handleTitleChange(e.target.value)}
                  placeholder="Enter product title"
                  required
                />
              </div>

              {/* Product Slug */}
              <div className="space-y-2">
                <Label htmlFor="modal-slug">Product URL</Label>
                <Input
                  id="modal-slug"
                  value={formData.slug || ''}
                  onChange={(e) => handleSlugChange(e.target.value)}
                  placeholder="product-url-slug"
                />
                <p className="text-xs text-muted-foreground">
                  {slugManuallyEdited 
                    ? "Custom URL slug. Clear this field to auto-generate from title again." 
                    : "Auto-generated from title. You can edit this to customize the URL."}
                </p>
              </div>
                
              {/* Current Status Display */}
              <div className="p-3 bg-muted/50 rounded-lg">
                <div className="flex items-center space-x-2">
                  <div className={`w-2 h-2 rounded-full ${
                    product?.is_published ? 'bg-green-500' : 'bg-gray-400'
                  }`} />
                  <span className="text-sm font-medium">
                    Current Status: {product?.is_published ? 'Published' : 'Draft'}
                  </span>
                </div>
                <p className="text-xs text-muted-foreground mt-1">
                  {product?.is_published 
                    ? 'This product is visible to visitors' 
                    : 'This product is hidden from visitors'}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* SEO Settings */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>SEO Settings</CardTitle>
              <CardDescription>
                Optimize this product for search engines
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Meta Description */}
              <div className="space-y-2">
                <Label htmlFor="modal-meta_description">Meta Description</Label>
                <Textarea
                  id="modal-meta_description"
                  value={formData.meta_description || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, meta_description: e.target.value }))}
                  placeholder="A brief description of this product for search engines"
                  rows={3}
                />
                <p className="text-xs text-muted-foreground">
                  Recommended length: 150-160 characters ({(formData.meta_description || '').length}/160)
                </p>
              </div>

              {/* Meta Keywords */}
              <div className="space-y-2">
                <Label htmlFor="modal-meta_keywords">Meta Keywords</Label>
                <Input
                  id="modal-meta_keywords"
                  value={formData.meta_keywords || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, meta_keywords: e.target.value }))}
                  placeholder="keyword1, keyword2, keyword3"
                />
                <p className="text-xs text-muted-foreground">
                  Separate keywords with commas
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card className="shadow-sm">
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
              <CardDescription>
                Common product management tasks
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-wrap gap-2">
                <Button variant="outline" size="sm" asChild>
                  <Link href={`/admin/products/builder/${product.slug}`}>
                    Edit Product
                  </Link>
                </Button>
                <Button variant="outline" size="sm" asChild>
                  <a 
                    href={site ? `/${site.subdomain}/products/${product.slug}` : '#'} 
                    target="_blank" 
                    rel="noopener noreferrer"
                  >
                    Preview Product
                  </a>
                </Button>
              </div>
            </CardContent>
          </Card>


          {/* Form Actions */}
          <div className="flex justify-between pt-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => onOpenChange(false)}
              disabled={saving}
            >
              Cancel
            </Button>
            <div className="flex space-x-2">
              <Button 
                type="submit" 
                variant="outline"
                disabled={saving}
              >
                {saving ? "Saving..." : "Save as Draft"}
              </Button>
              <Button 
                type="button" 
                onClick={handlePublish}
                disabled={saving}
              >
                {saving ? "Publishing..." : "Publish"}
              </Button>
            </div>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}